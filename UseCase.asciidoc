= Use Case

As described in the first part of this thesis, non-simulated shared ownership of any asset, but especially of a sound money is a groundbreaking achievement. With this new technology at our disposal, there are countless new solutions to known problems, and probably even more solutions to unknown unknown problems that we yet have to discover. The following list is mere an early compilation of interesting use cases, and not at all exhaustive. It is up to individual sovereign entrepreneurs to evaluate client problems and judge possible solution.

== 1-of-2 Joint Spending

Alice and Bob have a joint account used for every day spending of petty cash. The signature of either one of them is sufficient to send the coin, thus no collaboration or communication between the two is necessary. This is very convenient for every day transactions, but it requires a large amount of trust, since both of them could turn rogue and run away with the money, and there is no defense against this. Further, if only one of them gets compromised by a malicious hacker, he can equally steal the funds without recourse.

== 2-of-2 Joint Saving

Alice and Bob have a joint account used for long term savings. Both signatures are required to spend the funds, this requires coordination and communication for the signing ceremony. If either one of them is unavailable, the funds cannot be spent. This approval process is not convenient for recurring payments, and thus it is more intended for long hodling of the coins. Since even the loss of one private key leads to indispensability, it is very much recommended to keep several backups in diverse secure locations. In the case of a malicious hacker gaining access to one of these keys, the funds are still secure, and there might be enough time to move them to a new script with fresh keys.

== 2-of-2 Two-Factor Authentication

Alice alone generates two private keys, she stores one on her phone and the other on her main computer. She requires access to both devices in order to spend the funds, thus an attacker needs to compromise both at the same time. However, if one of the two devices gets lost without backup, then access to the bitcoin is forever destroyed.
                                                                                
== 2-of-2 Smart Contract Building Block

Advanced smart contracts such as the lightning network, tumblebit or coin swaps require a 2-of-2 multi sig. These second layer protocols commit to funds on chain and later update the state of property right without immediately settling back to the base layer. ………

== 2-of-3 Child Saving

Alice and Bob are the parents of Charlie, and they have a child savings account where all three have one key. The parents would like to pass on with “warm hands” some of their wealth to their heir and to teach him the importance of decreased time preference through savings. Charlie alone cannot spend the funds, but he requires the approval of either one of his parents. In the same manner, one of the malicious parents or a hacker cannot alone spend the funds, but they always require approval of either their son or partner. The parents are protected against unwise spending of their son, and Charlie is protected against attempted theft of one of his parents. In the case of loss of one private key, the other two can still collaborate to produce a valid signature script.

== 2-of-3 Buyer, Seller, Trust less Escrow

Alice wants to purchase a good from Bob, but they wanted to protect against the first-mover disadvantage. Charlie can be as the trust less escrow of a 2-of-3 multi sig. Alice funds the address with the amount of bitcoin agreed upon previously. Bob will wait until these funds are confirmed and verify on his full node. Then he will give Alice the good she desires and he will generate and sign a transaction spending the multi sig wallet onto his own single sig wallet. Only when Alice has a secured control over the good will she also sign that proposed transaction and broadcast it to the Bitcoin network. In this collaborative case, Charlie the trust less escrow is not needed. But when Bob does not hand over the good, Alice will call on the judge and after his verification of the events, Charlie will co-sign with Alice a transaction giving the bitcoin back to her. On the other hand, if Bob has given Alice the good, but she refuses to pay, Bob can appeal to Charlie who will judge in his favor and co-sign a transaction paying Bob. In order to protect against denial-of-service attacks an upfront escrow from Alice and Bob might be added to the multi sig address. In the case of attempted fraud, the judge will release that deposit to the victim. To ensure Charlie's honesty Alice and Bob might also require a security bond from him. Charlie himself alone cannot steal the funds. The decentralized and self-hosted bisq exchange footnote:[Chris Beams, Manfred Karrer. Phase Zero Protocol. 2017] has been successfully using this smart contract to secure millions of trades.

== 2-of-3 Hot Wallet Security

In order to secure hot wallet funds Alice can generate two private keys, keeping one on her hot hardware and the other one as a cold storage. The security specialist Bob will have the third key on a hot wallet. Every time Alice wants to make a payment she builds the transaction and signs it with her hot key. Then she sends the partially signed Bitcoin transaction to Bob who will only sign the transaction if some predetermined conditions are met. This can be some two-factor authentication, or in-person verification, or a white listed and blacklisted addresses, or some maximum value in a given time period. Only when all of the agreements are met will Bob sign this transaction with his hot wallet key. If Bob realizes that Alice has been compromised then he will refuse to sign the transaction. If Bob becomes unavailable Alice can get her second key out of cold storage and sign the transaction all by herself. Bob himself cannot spend the money alone.

== 3-of-5 Low Trust Joint Funds

The five peers Alice Bob Charlie David and Eve work on the same project and have a low trust 3-of-5 multi sig. Each of them holds one key and they need collaboration of any of the three peers in order to spend the bitcoin. This reduces the threat of embezzlement, hacking and loss of two keys. Since it is provable on the timechain which private keys have signed the transaction, there is accountability after the fact. This is especially useful for decentralized and non-hierarchical projects.

== Transaction Output Commitments

Alice wants to pay 10 different peers, yet the current transaction fee level is high, and she estimates it will decrease in the future. She wants to commit to the payment now, yet pay the fee for the final transaction at a later point in time. Alice requests the public keys of all 10 receivers and builds a large 10-of-10 multi signature script. She build an unsigned and unbroadcasted setup transaction, with her UTXO in the input, and the 10-of-10 multisig with the total amount she wants to send, as well as her change output. Then, she creates a distribution transaction, which spends the multisig UTXO and creates the 10 different UTXOs with the individual public keys of the receivers. Alice then requests each of the receiver to sign the distribution transaction, and she ensures that each co-signer has a full valid signature of all the peers. Only then does she sign and broadcast the setup transaction, to get quick confirmation with a relatively low fee. The receivers are now certain that at any time one of them can broadcast the signed distribution transaction to receive the money.

```
Setup transaction [signed after distribution tx]

[i] Alice signature  |  [o] 10-of-10 multisig
			    Alice shange
```
```
Distribution transaction [signed first]

[i] 10 signatures    |  [o] Bob pubkey
			    Charlie pubkey
			    ...
			    Kai pubkey
```

-----

Multi signature transactions are an integral part to Bitcoin script since it's beginning, and there are many proven and theoretical problems that can be solved with this technology. This is a critical theoretical analysis of these proposed use cases.

= Single Party Multi Signatures

== n-of-n Second Factor Authentication

In order to securely hold on chain bitcoin, Alice only needs to keep a private key hidden from others. Anyone with the knowledge of the cryptographic secret has full access to the corresponding UTXO. As non-scarce information is easily shared, there is a risk that the single private key is leaked. There is no second factor needed to move the funds, thus the slightest mistake could lead to sharing of the key, which means a complete loss of funds. Although a single signature is convenient, fast, and good for small denominations, multi sig can be used to add redundancy and security. 

For example, Alice can specify a n-of-n multi signature script, let's say 2-of-2, where Alice is the only individual in possession of both private keys, one on a hardware wallet, the other on her phone. Only with a valid signature with both secrets can the UTXO be spent. This is a secure second factor authentication, for example, Alice needs to have access to both her hardware wallet and phone in order to sign a valid spending transaction. In the case that a malicious actor gains undue access to only one of her devices containing the private key, this is not enough to spend the coins. The chance that a hacker is breaking both of her devices is several orders of magnitude more difficult. However, in the case that Alice looses only one of her devices and private key, she looses access to the bitcoin which would rightfully be hers. It is as impossible for her to spend the UTXO with only one key, as it is for a malicious actor.

Thus, n-of-n second factor authentication is a valid defense against the leaking of private keys to unwanted malicious actors. They need to gain access to n private keys in order to have full control over the UTXO, the difficulty exponentially increases as n increases. Especially when Alice stores the private keys in different devices, in different location and with different protocols. However, the n-of-n script does not protect in the case where Alice herself looses access to even only one of the private keys. She can lock herself out of her own money, and this risk increases, as n increases. Although, this is also the case for a single signature script, once that one key is lost, the money is locked indefinitely. The trade off for the n-of-n scheme is thus the number of n in relation to the attackers sophistication to break all n security protocols, and the likelihood of Alice herself to loose only one of n keys.

Redeem script:

```console
  n
  <pubKey Alice 1>
  <pubKey Alice 2>
  ...
  <pubKey Alice n>
  n
  OP_CHECKMULTISIG
```

Signature script:

```
  <signature Alice 1>
  <signature Alice 2>
  ...
  <signature Alice n>
```

== m-of-n Second Factor Authentication

The main risk of n-of-n multi sig is that the loss of only one key leads to a complete loss of funds. Although this is very secure against malicious actors trying to steal money, it does not protect Alice from herself loosing access to one single key. A m-of-n script can provide further benefits that neither single, nor n-of-n multi sig have.

Alice can assign a m-of-n multi sig script to a UTXO, such that she can only spend the coin with a total of m signatures. For a 2-of-3 example, she stores one key on her mobile wallet, another on her hardware wallet, and the third on a cold storage paper wallet. For every day transactions, she will use her phone and hardware wallet to build and sign the valid signature. These two wallets are user friendly enough to provide swift and easy execution of the spending protocol. A malicious actor needs to gain access to m private keys and this increases in difficulty with higher m and more complex and secure key generation and storage protocols. A 2-of-3 multi sig has the same anti theft protection as a 2-of-2 multi sig. The attacker needs to gain access to both Alice's phone and hardware wallet, or one of them in addition to the cold storage. However, in the case that Alice looses one of her every day keys, let's assume her mobile wallet, she can get the paper wallet key out of cold storage, and use it as the second factor together with her hardware wallet. She can decrease the risk of loss of private keys drastically with such a script.

The m-of-n multi sig script provides simultaneous protection against theft and loss of private keys. The malicious actor needs to gain access to m, not n, private keys in order to generate a valid spending transaction. This provides the same level of protection as a m-of-m multi sig script would. However, contrarily to n-of-n scripts, Alice can afford to loose n-m private keys before she herself looses access to the UTXO. She can have m convenient and easy to use keys, like mobile and hardware wallets, which she can interact with for every day spending. For redundancy however, she also has n-m cold storage keys, which are difficult to access, for example a paper wallet hidden in a remote safe. She only needs to reveal these keys in the case where she looses access to some of the every day keys. However, the UTXO is locked when she m private keys are lost, same as with a m-of-m multi sig script. 

Redeem script:

```console
  m
  <pubKey Alice 1>
  <pubKey Alice 2>
  ...
  <pubKey Alice n>
  n
  OP_CHECKMULTISIG
```

Signature script:

```
  <signature Alice 1>
  <signature Alice 2>
  ...
  <signature Alice m>
```

= Multi Party Multi Signatures

2-of-3 or 4-of-5 multi sig, with one key controlled by the security specialist footnote:[See BitGo and Casa], and all others by clients. The bank gives approval / 2FA for each spend, but without full custody. The bank can not send the funds without the client signature, thus there is no risk of theft. There are some privacy concerns, because the bank has the knowledge of the customers public keys and it will co-sign all the transactions. The bank knows how much is send when to whom, maybe even for what.

== Group Fund Management

n-of-n multi sig where all parties provide funding and each has one of n required keys to spend out of the script. Approval and signature of all the peers is required. This can be used for shared funds that are desired to be spent only with the consent of all the constituents. 

Business partners share access to funds in a n-of-n multi sig, so that all peers need to agree on the allocation of funds. Potentially improved with optional time locks. [2-of-2 always, 1-of-2 after 1000 blocks]

== Escrow

Upfront security deposit for a market place / exchange, with semi-trusted third party arbitrator to sign in case of dispute.footnote:[See Bisq 2-of-3 & HodlHodl 2-of-2]

2-of-3 [Alice, Bob, Charlie] can always spend from this script, after 1000 blocks, 

Redeem Script for time locked escrow: 
```console
    IF 
      IF 
        2 
      ELSE 
        <1000 blocks> CHECKSEQUENCEVERIFY DROP 
        <Public Key 1> CHECKSIGVERIFY 
        1
      ENDIF 
      <Public Key 2> <Public Key 3> <Public Key 4> 3 CHECKMULTISIG 
    ELSE 
      <3000 blocks> CHECKSEQUENCEVERIFY DROP 
      <Public Key 1> CHECKSIGVERIFY 
    ENDIF
```

== Vault

Script with m-of-n multi sig, time lock and designated output address. It can only be spend with m signatures after a specified time and only to one previously agreed upon address. This might be useful for cold storage that can only be spend to another script that is controlled by the same owner.


The latest upgrade to testnet v4.0 is outstanding - thanks to all the contributors :)

Here is some feedback after playing around with the receive feature:


> "Send Maximum" left 600 sats dust
> Change color for receive on chain address / lightning invoice
> Lightning Fee Protection with tolerance fee <21 sat is really useful!
