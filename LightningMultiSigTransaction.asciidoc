= Multi Signature Transaction in Lightning Payment Channels


These are several possible approaches to solve the problem. Maybe changing the commitment transaction scrip, or enforcing the  multi sig on a higher wallet level, not on the time chain directly.


== Commitment transaction script

Redeem Script: `0 sigAlice sigBob 2 pubkeyAlice pubkeyBob 3 sigDave pubkeyDave` 

Witness script: `0 <signature 4> 1 <Public Key 4> CHECKSIG 0 <signature 1> 1 <Public Key 1> <Public Key 2> 2 CHECKMULTISIG` // Correct?

ScriptPubKey: `0 SHA256(<witnessScript>)`

Now each channel state update requires 2/3 sigs from ABC + sig from D.footnote:[James C. https://twitter.com/digi_james/status/1083403533230198784]


== Key aggregation

Described in the chapter on [Schnorr MuSig](/SchnorrMuSig.asciidoc), due to the linearity of the Schnorr signature scheme, several individual public keys can be interactively aggregated to one single aggregated public key. A valid signature can only be computed, if all participants in the MuSig produce a valid signature with their individual private keys. A verifier can not distinguish between a regular and aggregated public key and signature. A regular 2-of-2 lightning payment channel with Schnorr signatures between Alice and David would thus in the cooperative closing case look exactly the same as any other single signature transaction. Further, the one key on Alice's side of the channel could as well be an aggregated key of 3-of-3 Alice Bob and Charlie. Thus, in order to produce a valid signature with that aggregated key, all three of them need to cooperate. David does not need to know, and cannot know, that his channel peer is in fact three individual key parties.


== Split Revocation Basepoint Secret

The `revocation_basepoint_secret` is splitted into m-of-n parts, so that the counterparty will only release pre-image when the `per_commitment_secret` is fully transmitted. Schnorr aggregation or some other threshold signature type should work, but Shamir's secret sharing not. When David receives the revocation basepoint, A,B,C no longer claim the previous state of the channel. Current script could be tweaked with 2 checks so that there are 2 revocation points required. footnote:[Slack conversation with Alex Bosworth https://lightningcommunity.slack.com/archives/C6WS7BEDV/p1548846901024100]

**Revocation Transaction**

```console
OP_IF
  <revocation_key>
OP_ELSE
 `to_self_delay`
  OP_CSV
  OP_DROP
  <local_delayedkey>
OP_ENDIF
OP_CHECKSIG
```

**Potential MultiSig Revocation Transaction** [Does this actually work?!] Revocation keys would be signatures.

```console
OP_IF
  2
  <revocation_key_A>
  <revocation_key_B> 
  <revocation_key_C>
  3
  OP_CHECKMULTISIG
OP_ELSE
 `to_self_delay`
  OP_CSV
  OP_DROP
  <local_delayedkey>
OP_ENDIF
OP_CHECKSIG
```

== Stop HTLC before / during route

Regular 2-of-2 payment channel, but hold the HTLCs and only release for route until a threshold of m-of-n secrets is revealed/action is taken. Possibly with macaroons, but how do you make the software reliant?footnote:[Alex Bosworth https://lightningcommunity.slack.com/archives/C6WS7BEDV/p1547489731016500?thread_ts=1547150765.007200&cid=C6WS7BEDV]

HODL-HTLC:footnote:[Joost Jager Pull Request #2022] Instead of immediately settle the HTLC, the receiver waits for a time period or until he has access to some secret information. Receiver can check conditions, sender security deposit, Preimage is set by sender and only revealed to receiver when action is performed [atomic swap]

M-of-n hash preimages are required for the HTLC to be fulfilled. Timeouts are at the minimum the escrow timeouts. Sender, escrow and receiver [or others] have the n pre images. In most cases, sender and receiver will disclose preimage themselves without the need for escrow actionfootnote:[2-of-3 Instant Escrow, or How to Do "2-of-3 Multisig Contract" Equivalent on Lightning, Joseph Poon: https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-January/000403.html]

```console
### This is a complete copy of Joseph's proposal in mail - need to verify and check for optimization ###

Assume the order in the stack is Sender, Escrow, Recipient.

For PAID 2-of-3 Escrow+Recipient, the HTLC stack is:
        <BobSig> <0> <EscrowPreimageR> <RecipientPreimageR> <0>

If it's REFUND because 2-of-3 has not been redeemed in time:
        <AliceSig> <0> <1>

Bitcoin Script (Alice's, we use OP_1/OP_0 to distinctly show computed
true/false. 0/1 is for supplied data as part of the
sigScript/redeemScript stack):
------------------------------------------------------------------------

//Paid
OP_IF
        <CSVDelay> OP_DROP OP_CSV //under rusty's CSV style

        //Stack: <BobSig> <0> <EscrowPreimageR> <RecipientPreimageR>
        //Recipient must agree to receive funds.
        OP_HASH160 <RecipientHash> OP_EQUALVERIFY

        //Stack: <BobSig> <0> <EscrowPreimageR>
        //Either the Sender or Escrow must consent for payment
        OP_HASH160 <EscrowHash> OP_EQUAL
        //Stack: <BobSig> <0> <OP_1>
        OP_SWAP
        //Stack: <BobSig> <OP_1> <0>
        OP_HASH160 <SenderHash> OP_EQUAL
        //Stack: <BobSig> <OP_1> <OP_0>
        OP_BOOLOR
        //Stack: <BobSig> <OP_1>
        OP_VERIFY

        <BobPubKey>
        //Stack: <BobSig> <BobPubKey>
//Refund
OP_ELSE
        //Stack: <AliceSig> <0>
        OP_HASH160 OP_DUP
        <R-HASH> OP_EQUAL
        OP_NOTIF
                <CSVDelay> OP_DROP OP_CSV
        OP_ENDIF

        <HTLCTimeout> OP_DROP OP_CLTV

        //Stack: <AliceSig>
        <AlicePubKey>
        //Stack: <AliceSig> <AlicePubKey>
OP_ENDIF
OP_CHECKSIG
------------------------------------------------------------------------
```

== M-of-n RPC access rights to node with 2-of-2 payment channels

Regular 2-of-2 payment channel, but limited access is given to n parties, so that m have to approve the transaction. But, administer right and hardware access are not trustless, maybe read only harEscrowdware secure module.

== Submarine Swap to On Chain MultiSig

An atomic swap where Alice is selling lightning liquidity and buys on chain capacity, which is locked in a m-of-n multisig redeem script. Regular instant funding of on chain multisig, but not the desired shared ownership of a lightning multi sig to spend. Probably not of interest.

== Miniscript 

2-of-3

`multi(2,A,B,C)`

2-of-3 + time lock as vault

`aor(and(pk(A),time(T)),pk(B))`

2-of-3 within 3-of-4

`thres(3,pk(A),pk(B),pk(C),multi(2,D,E,F))`

HTLC

`aor(and(pk(A),time(T)),and(pk(B),hash(H)))`
